{
	"info": {
		"_postman_id": "e13c01da-1e21-4bbe-91d3-9d55aa424752",
		"name": "GitHub-Test-Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30350025"
	},
	"item": [
		{
			"name": "1. At least 30 public Gists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are at least 30 gists\", function () {",
							"    pm.expect(pm.response.json().length).to.be.at.least(30);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/gists/public?per_page=30",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"public"
					],
					"query": [
						{
							"key": "per_page",
							"value": "30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2. User wolfordj has at least one public Gist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User wolfordj has at least one gist\", function () {",
							"    pm.expect(pm.response.json().length).to.be.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/users/wolfordj/gists",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"users",
						"wolfordj",
						"gists"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Save # of Gists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.environment.set(\"initialGistCount\", pm.response.json().length);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Create Gist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (Created)\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.environment.set(\"GistID\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"Hello World Examples\",\n    \"public\": true,\n    \"files\": {\n        \"hello_world.js\": {\n            \"content\": \"conosle.log('Hello World');\"\n        },\n        \"hello_world_js.txt\": {\n            \"content\": \"Run `node hello_world.js` to print Hello World\"\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/gists",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Verify that Gist has been added",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Number of gists has increased by 1\", function () {",
							"    pm.expect(pm.response.json().length).to.eql(pm.environment.get(\"initialGistCount\") + 1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Verify contents of Gist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Gist description matches\", function () {",
							"    const expectedDescription = \"Hello World Examples\";",
							"    pm.expect(pm.response.json().description).to.eql(expectedDescription);",
							"});",
							"",
							"pm.test(\"Gist public status matches\", function () {",
							"    pm.expect(pm.response.json().public).to.eql(true); // The provided Gist is public",
							"});",
							"",
							"pm.test(\"Gist files count and names match\", function () {",
							"    const expectedFiles = [\"hello_world.js\", \"hello_world_js.txt\"];",
							"    const responseFiles = Object.keys(pm.response.json().files);",
							"    pm.expect(responseFiles.length).to.eql(expectedFiles.length);",
							"    pm.expect(responseFiles).to.have.members(expectedFiles);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/gists/{{GistID}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{GistID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Edit Gist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (Patch successful)\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"Edited Gist Description\",\n    \"files\": {\n        \"hello_world.js\": {\n            \"content\": \"console.log('Edited Gist Description and File Content');\"\n        }\n    }\n}"
				},
				"url": {
					"raw": "https://api.github.com/gists/{{GistID}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{GistID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Verify Edit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Gist description was edited\", function () {",
							"    pm.expect(pm.response.json().description).to.eql(\"Edited Gist Description\");",
							"});",
							"",
							"pm.test(\"Gist file content was edited\", function () {",
							"    pm.expect(pm.response.json().files[\"hello_world.js\"].content).to.eql(\"console.log('Edited Gist Description and File Content');\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{GistID}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{GistID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. Verify that Gist is Unstarred",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 (Not Starred)\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{GistID}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{GistID}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. Star Gist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 (Starred Successfully)\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{GistID}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{GistID}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. Verify Star",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 (Is Starred)\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{GistID}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{GistID}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "7. Verify Addition to Starred List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Gist is in starred list\", function () {",
							"    let gists = pm.response.json();",
							"    let gistIds = gists.map(gist => gist.id);",
							"    pm.expect(gistIds).to.include(pm.environment.get(\"GistID\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/starred",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"starred"
					]
				}
			},
			"response": []
		},
		{
			"name": "8. Verify Star",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 (Is Starred)\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{GistID}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{GistID}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "8. Remove Star",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 (Delete Successful)\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{GistID}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{GistID}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "8. Verify that Gist is Unstarred Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 (Not Starred)\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{GistID}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{GistID}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "9. Verify that Gist Exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{GistID}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{GistID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "9. Delete Gist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 (Deletion Successful)\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{GistID}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{GistID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "9. Verify deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 (Not Found)\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/{{GistID}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{GistID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}